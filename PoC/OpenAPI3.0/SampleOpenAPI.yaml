openapi: "3.0.0"
info:
  version: 1.0.0
  title: Trinity Wayfinders
servers:
  - url: http://example.swagger.io/v1
paths:
  /navigation/{userId}/start/{start}/destination/{dest}:
  
    get:
      summary: Find route to destination
      operationId: getRoute
      tags:
        - Routing
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
        
        - name: start
          in: path
          required: true
          description: Route start location
          schema:
            type: string

        - name: dest
          in: path
          required: true
          description: Route destination
          schema:
            type: string
        
            
      responses:
        '200':
          description: A single route to destination
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Route"
        '404':
          description: Route Destination not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user: 
    post:
      summary: Create a new user
      operationId: createPets
      tags:
        - Users
      parameters:
        - in: query
          name : user 
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      
      responses:
        '201': 
          description: User was created
        '400':
          description: Malformed object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Interal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          
  /user/{userId}:
    get:
      summary: Info for a specific user
      operationId: showUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        
        '400':
          description: No user with Id=userID found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Route:
      required:
        - startPointName
        - endPointName
      properties:
        startPointName:
          type: string 
        endPointName:
          type: string 
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string